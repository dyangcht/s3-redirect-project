worker_processes 1;

env AWS_ACCESS_KEY_ID;
env AWS_SECRET_ACCESS_KEY;

events {
  worker_connections 1024;
}

# error_log logs/error.log error;
error_log  logs/error.log  debug;

http {
  default_type  application/octet-stream;
  map_hash_bucket_size 256;

  lua_package_path "$prefix/lua/?.lua;$prefix/resty_modules/lualib/?.lua;;";
  lua_package_cpath "$prefix/resty_modules/lualib/?.so;;";
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" ["$http_authorization"] - [$http_host] - [$request_uri] [arg: $args] '
    '"$http_x_amz_content_sha256" - "$http_x_amz_date" - "$http_x_amz_expires" - "$http_x_amz_signature" - "$http_x_amz_signedheaders" - "[$rewrite_result]"';
    # '"Body: $request_body"';
  log_format  debug  '$remote_addr - $remote_user [$time_local] "$request" - [$rewrite_result]';
  access_log  logs/access.log  main;

  lua_need_request_body on;
  
  # $http_host = host without port = web server's IP
  server {
    listen 10443;
    listen [::]:10443;

    # 影響是否可以在 access log 中顯示 request_body 的內容
    client_body_buffer_size 50M;
    # client_body_buffer_size 1K;
    client_max_body_size 100M;

    set $proxyserver 192.168.61.105:10443;
    set $s3_host 192.168.61.140:10443;
    set $s3_uri $request_uri;
    set $rewrite_result ok;
    set $final http://$s3_host/dr-bucket1?$args;
    set $new_method GET;

    location /bucket1 {
        proxy_set_header authz $http_authorization;
        proxy_set_header Authorization "";
        more_set_headers "x-amz-date: ";
        add_header X-Amz-Content-Sha256 "";

        # change bucket name
        set_by_lua_block $new_uri {
          ngx.var.rewrite_result = ngx.re.gsub(ngx.var.request_uri, "bucket1", "dr-bucket1")
          ngx.log(ngx.INFO, "bucket 1 URL ............. " .. ngx.var.rewrite_result)
          return ngx.var.rewrite_result
        }
        set $final http://$s3_host$rewrite_result;
        # rewrite ^/[^/]+(/.*)$ $1 break;
        proxy_pass $final;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
    }

    location / {
        if ($http_authorization = "") {
          
          access_by_lua_block {

            ngx.log(ngx.ERR, "s3_uri String............. " .. ngx.var.s3_uri)
            ngx.log(ngx.ERR, "request_uri String............. " .. ngx.var.request_uri)

            ngx.log(ngx.INFO, "New S3 String............. " .. ngx.var.uri) 
            require("resty.aws-signature").s3_set_headers(ngx.var.s3_host, ngx.unescape_uri(ngx.var.uri))
          }
          break;
        }

        access_by_lua_block {
          local function log_request_body()
            -- local ok, err = ngx.req.read_body()
            local ok, err = ngx.req.get_body_data()
            if not ok then
              ngx.log(ngx.ERR, "Failed to read request body: ", err)
              return
            end

            local body = ngx.req.get_body_data()
            if body then
              ngx.log(ngx.NOTICE, "Request body: has data...")
            else
              ngx.log(ngx.NOTICE, "Request body is empty")
            end
          end

          ngx.log(ngx.INFO, "Query String............. " .. ngx.var.s3_uri)
          log_request_body()
        }
        proxy_pass http://$proxyserver;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
    }
  }
}
