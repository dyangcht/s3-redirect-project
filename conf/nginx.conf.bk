worker_processes 1;

env AWS_ACCESS_KEY_ID;
env AWS_SECRET_ACCESS_KEY;

events {
  worker_connections 1024;
}

# error_log logs/error.log debug;
error_log  logs/error.log  debug;

http {
  default_type  application/octet-stream;

  lua_package_path "$prefix/lua/?.lua;$prefix/resty_modules/lualib/?.lua;;";
  lua_package_cpath "$prefix/resty_modules/lualib/?.so;;";
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" ["$http_authorization"] - [$http_host] - [$request_uri] [arg: $args] '
    '"$http_x_amz_content_sha256" - "$http_x_amz_date" - "$http_x_amz_expires" - "$http_x_amz_signature" - "$http_x_amz_signedheaders" '
    '"Body: $request_body"';
  access_log  logs/access.log  main;

  lua_need_request_body on;
  # 從 rewrite 從取後 $1
  map $args $final {
    default "http://$s3_host/bucket1-rclone$1?$args";
    "~*encoding-type=url" "http://$s3_host/bucket1-rclone$1";
    "" "http://$s3_host/bucket1-rclone$1";
    "~*location=" "http://$s3_host/bucket1-rclone$1";
    "~*versioning" "http://$s3_host/bucket1-rclone$1";
    "~*delimiter=%2F&uploads=" "http://$s3_host/bucket1-rclone$1";
    "~*object-lock=" "http://$s3_host/bucket1-rclone$1";
    "~*delimiter=%2F&max-keys=1000&prefix=" "http://$s3_host/bucket1-rclone$1";
  }

  map $args $final2 {
    default "http://$s3_host/bucket3?$args";
    "~*encoding-type=url" "http://$s3_host/bucket3";
    "" "http://$s3_host/bucket3";
    "~*location=" "http://$s3_host/bucket3";
    "~*versioning" "http://$s3_host/bucket3";
    "~*delimiter=%2Fuploads=" "http://$s3_host/bucket3";
  }

  # $http_host = host without port = web server's IP
  server {
    listen 10443;
    listen [::]:10443;

    # 影響是否可以在 access log 中顯示 request_body 的內容
    client_body_buffer_size 100M;
    # client_body_buffer_size 1K;
    client_max_body_size 100M;

    set $proxyserver 192.168.61.105:10443;
    set $s3_host 192.168.61.140:10443;
    set $s3_uri $request_uri;

    location = /bucket1 {
    # location ~ /([^\/-]+) {
        proxy_set_header Authorization "";
        # add_header x-amz-date "";
        more_set_headers "x-amz-date: ";
        # add_header X-Amz-Date "";
        # more_set_headers "X-Amz-Date: ";
        add_header X-Amz-Content-Sha256 "";
        # proxy_set_headers X-Amz-Content-Sha256 "";
        # proxy_hide_header *;
        # rewrite ^/[^/[^\/-]]+(/[^\/-]+)$ $1 break;
        rewrite ^/[^/]+(/.*)$ $1 break;
        # rewrite ^/bucket1(.*)$ /bucket3$1$is_args$args break;
        # proxy_pass http://$http_host/bucket3$1$is_args$args;
        # proxy_pass http://$proxyserver/bucket3$1$is_args$args;
        # if ($args = "encoding-type=url") {
          # set $final http://$s3_host/bucket3$1; # ?$args&count=1;
        # }
        # if ($args != "encoding-type=url") {
          # set $final http://$s3_host/bucket3$1?$args; # ?$args&count=1;
        # }
        # if ($args = "") {
          # set $final http://$s3_host/bucket3$1; # ?$args&count=1;
        # }
        proxy_pass $final;
        # proxy_pass http://$s3_host/bucket3$1; # ?$args&count=1;
        # proxy_pass http://$s3_host/bucket3?count=1&$args;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
    }

    location / {
        if ($http_authorization = "") {
          access_by_lua_block {
            ngx.log(ngx.ERR, "s3_uri String............. " .. ngx.var.s3_uri)
            require("resty.aws-signature").s3_set_headers(ngx.var.s3_host, ngx.var.s3_uri)
          }
          break;
        }

        access_by_lua_block {
          local function log_request_body()
            -- local ok, err = ngx.req.read_body()
            local ok, err = ngx.req.get_body_data()
            if not ok then
              ngx.log(ngx.ERR, "Failed to read request body: ", err)
              return
            end

            local body = ngx.req.get_body_data()
            if body then
              ngx.log(ngx.NOTICE, "Request body: ", body)
            else
              ngx.log(ngx.NOTICE, "Request body is empty")
            end
          end

          ngx.log(ngx.ERR, "Query String............. " .. ngx.var.s3_uri)
          log_request_body()
        }
        proxy_pass http://$proxyserver;
        proxy_set_header Host $http_host;
        proxy_http_version 1.1;
        # proxy_set_header Authorization $http_authorization;  # 将原始请求的 Authorization 头传递给 S3
        # proxy_set_header x-amz-date $http_x_amz_date;  # 将原始请求的 x-amz-date 头传递给 S3
    }
  }
}
